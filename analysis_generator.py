import os
import time
import pdfplumber
from pathlib import Path
from dotenv import load_dotenv
from langchain.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.output_parsers import StrOutputParser

load_dotenv()

def generate_report(pdf_path, txt_dir, report_dir):
    pdf_name = Path(pdf_path).stem

    txt_path = Path(txt_dir) / f"{pdf_name}.txt"
    report_path = Path(report_dir) / f"{pdf_name}_relatorio.txt"

    os.makedirs(txt_dir, exist_ok=True)
    os.makedirs(report_dir, exist_ok=True)

    with pdfplumber.open(pdf_path) as pdf, open(txt_path, 'w', encoding='utf-8') as f:
        for page in pdf.pages:
            text = page.extract_text()
            if text:
                f.write(text + '\n')
    print(f"Texto extra√≠do salvo em: {txt_path}")

    with open(txt_path, 'r', encoding='utf-8') as f:
        text_data = f.read()

    llm = ChatGoogleGenerativeAI(model='gemini-2.0-flash-lite', temperature=0.1)

    template = """
    Tarefa: Gere o RELAT√ìRIO DE AN√ÅLISE H√çDRICA ‚Äì COPASA exclusivamente a partir do arquivo .txt fornecido (fatura COPASA). 
    ‚ö†Ô∏è Importante: N√£o use conhecimento externo, n√£o invente valores, n√£o use "estimado" ou "aprox.". Apenas o que consta no arquivo.

    Sa√≠da obrigat√≥ria (formato exato):

    RELAT√ìRIO DE AN√ÅLISE HIDRICA - COPASA

    IDENTIFICA√á√ÉO:
    ‚Ä¢ Condom√≠nio/Edifica√ß√£o:  
    ‚Ä¢ Endere√ßo:  
    ‚Ä¢ C√≥digo do Cliente:  

    FATURA ATUAL:
    ‚Ä¢ Data de Emiss√£o:  
    ‚Ä¢ Per√≠odo de Refer√™ncia:  
    ‚Ä¢ Data de Vencimento:  

    CONSUMO:
    ‚Ä¢ Leitura Anterior:  
    ‚Ä¢ Leitura Atual:  
    ‚Ä¢ Consumo Total:  
    ‚Ä¢ Consumo M√©dio Di√°rio:  

    VALORES:
    ‚Ä¢ Valor do Consumo (√Ågua):  
    ‚Ä¢ Taxa de Esgoto:  
    ‚Ä¢ TOTAL:  

    OBSERVA√á√ïES:
    ‚Ä¢ [Alertas obrigat√≥rios]  
    ‚Ä¢ [Apenas as observa√ß√µes importantes presentes na fatura]  

    =====================================
    Regras detalhadas de extra√ß√£o e valida√ß√£o:

    üîπ Identifica√ß√£o
    - **Condom√≠nio/Edifica√ß√£o**: capturar o nome ap√≥s "COND"/"ED" ou, se n√£o existir, usar o nome do im√≥vel presente na √°rea "TOTAL A PAGAR".
    - **Endere√ßo**: concatenar logradouro + n√∫mero + bairro + cidade/UF + CEP, sempre que todos os elementos estiverem dispon√≠veis. 'FORMATO: Rua <Nome da rua>, <n√∫mero>, <Bairro>, <Cidade/UF>, CEP.'
    - **C√≥digo do Cliente**: usar MATR√çCULA exatamente como aparece, com espa√ßos.

    üîπ Fatura Atual
    - **Per√≠odo de Refer√™ncia**: do campo "REFER√äNCIA DA CONTA".
    - **Data de Emiss√£o**: do campo "Quando foi emitida?".
    - **Data de Vencimento**: da linha/coluna "VENCIMENTO".

    üîπ Consumo
    - **Leituras**: identificar dois padr√µes `dd/mm/aaaa <inteiro>`.  
    - A data mais antiga = Leitura Anterior  
    - A data mais recente = Leitura Atual  
    - **Consumo Total**: se houver linha expl√≠cita "XXm¬≥ (XX.XXX litros)", usar esse valor. Se n√£o houver, calcular: Leitura Atual ‚àí Leitura Anterior.  
    - **Valida√ß√£o**: verificar se (Leitura Atual ‚àí Leitura Anterior) ‚âà Consumo Total (toler√¢ncia de 1m¬≥).  
    - **Consumo M√©dio Di√°rio**: capturar o 3¬∫ n√∫mero da linha "SEU CONSUMO EM LITROS" correspondente ao m√™s de refer√™ncia. Acrescentar "litros/dia".

    üîπ Valores
    - **Valor do Consumo (√Ågua)**: linha "ABASTECIMENTO DE AGUA".  
    - **Taxa de Esgoto**: linha iniciada com "ESGOTO‚Ä¶".  
    - **TOTAL**: valor da √°rea "TOTAL A PAGAR" (preferir o total final).

    üîπ Observa√ß√µes
    - Compare o consumo atual com os √∫ltimos 6 meses:  
    - Se varia√ß√£o > +40% em rela√ß√£o √† mediana, alertar "Consumo at√≠pico (acima do hist√≥rico)".  
    - Se varia√ß√£o < ‚àí40%, alertar "Consumo at√≠pico (abaixo do hist√≥rico)".  
    - Se a valida√ß√£o das leituras n√£o fechar (>1 m¬≥ diferen√ßa), sinalizar "Poss√≠vel anomalia no registro de consumo" e explicar.
    - Obrigat√≥rio informar se foi feito por m√©dia.                                      - INFORMAR EM UPPERCASE : N√ÉO COLOQUE: N√ÉO INFORMADO, s√≥ coloque as informa√ß√µes se existirem.
    - Obrigat√≥rio informar se houve problema na coleta.                                 - INFORMAR EM UPPERCASE : N√ÉO COLOQUE: N√ÉO INFORMADO, s√≥ coloque as informa√ß√µes se existirem.
    - Obrigat√≥rio informar se houve uso at√≠pico de √°gua.                                - INFORMAR EM UPPERCASE : N√ÉO COLOQUE: N√ÉO INFORMADO, s√≥ coloque as informa√ß√µes se existirem.
    - Obrigat√≥rio informar se foi feito pelo uso do consumo h√≠drico.                    - INFORMAR EM UPPERCASE : N√ÉO COLOQUE: N√ÉO INFORMADO, s√≥ coloque as informa√ß√µes se existirem.
    - Obrigat√≥rio informar se tem possibilidade de vazamento ou problema com a leitura. - INFORMAR EM UPPERCASE : N√ÉO COLOQUE: N√ÉO INFORMADO, s√≥ coloque as informa√ß√µes se existirem.
    - Incluir avisos da fatura (ex.: "Tarifa social", "Consulta p√∫blica ANA", "Hidr√¥metro novo instalado").  
    - Se n√£o houver observa√ß√µes, escrever: "N√£o informado".

    üîπ Formata√ß√£o
    - N√∫meros: respeitar separadores como na fatura (ex.: "XX.XXX", "XXX,XX").  
    - Moeda: sempre "R$" seguido de duas casas decimais.  
    - N√£o acrescentar notas ou coment√°rios fora da se√ß√£o **OBSERVA√á√ïES**.  
    - Se qualquer campo n√£o existir no texto, escrever exatamente "N√£o informado".

    =====================================
    ‚ö†Ô∏è Nota final: Este relat√≥rio foi gerado automaticamente por Intelig√™ncia Artificial com base na fatura fornecida e **pode conter erros**.
    {text}
    """

    prompt = PromptTemplate(input_variables=['text'], template=template)
    chain = prompt | llm | StrOutputParser()

    time.sleep(4)
    print(f"Gerando relat√≥rio para: {pdf_name}")
    relatorio = chain.invoke({'text': text_data})

    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(relatorio)

    print(f"Relat√≥rio salvo em: {report_path}")
    return str(report_path)

def generate_reports_from_folder(pasta_pdfs, pasta_txts, pasta_relat):
    """
    Gera relat√≥rios apenas para PDFs que ainda n√£o possuem relat√≥rio correspondente.
    """
    os.makedirs(pasta_txts, exist_ok=True)
    os.makedirs(pasta_relat, exist_ok=True)

    existing_reports = set()
    if os.path.exists(pasta_relat):
        for arquivo in os.listdir(pasta_relat):
            if arquivo.endswith('_relatorio.txt'):
                pdf_base_name = arquivo.replace('_relatorio.txt', '')
                existing_reports.add(pdf_base_name)
    
    print(f"üìä Relat√≥rios j√° existentes: {len(existing_reports)}")
    
    pdfs_processados = 0
    pdfs_pulados = 0
    
    for nome in os.listdir(pasta_pdfs):
        if nome.lower().endswith(".pdf"):
            pdf_name = Path(nome).stem
            
            if pdf_name in existing_reports:
                print(f"‚è≠Ô∏è  Pulando {nome} - relat√≥rio j√° existe")
                pdfs_pulados += 1
                continue
            
            caminho = os.path.join(pasta_pdfs, nome)
            try:
                print(f"üÜï Processando novo PDF: {nome}")
                generate_report(caminho, pasta_txts, pasta_relat)
                pdfs_processados += 1
            except Exception as e:
                print(f"[ERRO no relat√≥rio] {nome}: {e}")
    
    print(f"‚úÖ Resumo: {pdfs_processados} novos relat√≥rios gerados, {pdfs_pulados} PDFs pulados (j√° tinham relat√≥rio)")